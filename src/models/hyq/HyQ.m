
%% A structure with the HyQ robot model in the format described
%% in "A beginner's guide to 6-D vectors (part 2)" by Roy Featherstone.
%%
%% HYQ = HYQ()
%%
%% HYQ is the data struct with the robot model
%% parameters.
%% Depending on the original robot model in the Kinematics-DSL format,
%% and on configuration options, this function may take up to two
%% arguments:
%%
%% CONSTS is a struct with all the constant properties
%% of the robot model; it is required if constant-folding was disabled
%% during code generation. Otherwise, the constant numerical properties
%% of the model appear explicitly as float literals.
%%
%% PARAMS is a struct with the current value of the
%% possibly varying model properties, i.e. the model parameters. This
%% argument is required if the original robot model is parametric. If
%% not, ignore the argument.
%%
%% This file has been automatically generated by RobCoGen.

function hyq = HyQ()

hyq.robotname = 'HyQ';

hyq.NB = 13 + 5;
hyq.parent = zeros(1, 12 + 5);

hyq.jtype(1:6) = {'Px', 'Py', 'Pz', 'Rx', 'Ry', 'Rz'};
hyq.parent(1:6) = [0 1 2 3 4 5];

for i = 1:6
    % For the 'I' field, a loop until i=5 would be enough
    hyq.I{i} = mcI( 0, [0,0,0], zeros(3) );
    % 'Xtree' instead must be initialized up to i=6
    hyq.Xtree{i} = eye(6);
end

hyq.parent(1+6) = 6;
hyq.parent(2+6) = 1+6;
hyq.parent(3+6) = 2+6;
hyq.parent(4+6) = 6;
hyq.parent(5+6) = 4+6;
hyq.parent(6+6) = 5+6;
hyq.parent(7+6) = 6;
hyq.parent(8+6) = 7+6;
hyq.parent(9+6) = 8+6;
hyq.parent(10+6) = 6;
hyq.parent(11+6) = 10+6;
hyq.parent(12+6) = 11+6;

hyq.jtype{1+6} =  'Rz' ;
hyq.jtype{2+6} =  'Rz' ;
hyq.jtype{3+6} =  'Rz' ;
hyq.jtype{4+6} =  'Rz' ;
hyq.jtype{5+6} =  'Rz' ;
hyq.jtype{6+6} =  'Rz' ;
hyq.jtype{7+6} =  'Rz' ;
hyq.jtype{8+6} =  'Rz' ;
hyq.jtype{9+6} =  'Rz' ;
hyq.jtype{10+6} =  'Rz' ;
hyq.jtype{11+6} =  'Rz' ;
hyq.jtype{12+6} =  'Rz' ;

hyq.Xtree{1+6} = rotz(3.1415927410125732) * roty(-1.5707963705062866) * rotx(0.0) * ...
          xlt([0.3734999895095825 0.2070000022649765 0.0]);
hyq.Xtree{2+6} = rotz(0.0) * roty(0.0) * rotx(1.5707963705062866) * ...
          xlt([0.07999999821186066 0.0 0.0]);
hyq.Xtree{3+6} = rotz(0.0) * roty(0.0) * rotx(0.0) * ...
          xlt([0.3499999940395355 0.0 0.0]);
hyq.Xtree{4+6} = rotz(0.0) * roty(1.5707963705062866) * rotx(0.0) * ...
          xlt([0.3734999895095825 -0.2070000022649765 0.0]);
hyq.Xtree{5+6} = rotz(0.0) * roty(0.0) * rotx(-1.5707963705062866) * ...
          xlt([0.07999999821186066 0.0 0.0]);
hyq.Xtree{6+6} = rotz(0.0) * roty(0.0) * rotx(0.0) * ...
          xlt([0.3499999940395355 0.0 0.0]);
hyq.Xtree{7+6} = rotz(3.1415927410125732) * roty(-1.5707963705062866) * rotx(0.0) * ...
          xlt([-0.3734999895095825 0.2070000022649765 0.0]);
hyq.Xtree{8+6} = rotz(0.0) * roty(0.0) * rotx(1.5707963705062866) * ...
          xlt([0.07999999821186066 0.0 0.0]);
hyq.Xtree{9+6} = rotz(0.0) * roty(0.0) * rotx(0.0) * ...
          xlt([0.3499999940395355 0.0 0.0]);
hyq.Xtree{10+6} = rotz(0.0) * roty(1.5707963705062866) * rotx(0.0) * ...
          xlt([-0.3734999895095825 -0.2070000022649765 0.0]);
hyq.Xtree{11+6} = rotz(0.0) * roty(0.0) * rotx(-1.5707963705062866) * ...
          xlt([0.07999999821186066 0.0 0.0]);
hyq.Xtree{12+6} = rotz(0.0) * roty(0.0) * rotx(0.0) * ...
          xlt([0.3499999940395355 0.0 0.0]);


tmpI = ...
[[ 1.6882380247116089  ,	-(-0.02878900058567524),	-(0.2776939868927002)];
[-(-0.02878900058567524),	  8.665299415588379  ,	-(0.003819999983534217)];
[-(0.2776939868927002),	-(0.003819999983534217),	  9.243559837341309]];
tmpC = skew([0.027222000062465668; -2.3499999952036887E-4; 0.04222400113940239]);
tmpM = 64.86199951171875;
hyq.I{6} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];

tmpI = ...
[[ 0.13470500707626343  ,	-(3.600000127335079E-5),	-(0.02273399941623211)];
[-(3.600000127335079E-5),	  0.14417099952697754  ,	-(5.0999999075429514E-5)];
[-(0.02273399941623211),	-(5.0999999075429514E-5),	  0.01103300042450428]];
tmpC = skew([0.04262999817728996; 0.0; 0.16931000351905823]);
tmpM = 2.930000066757202;
hyq.I{7} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ 0.005495000164955854  ,	-(-0.007418000139296055),	-(-1.0199999815085903E-4)];
[-(-0.007418000139296055),	  0.08713600039482117  ,	-(-2.099999983329326E-5)];
[-(-1.0199999815085903E-4),	-(-2.099999983329326E-5),	  0.08987099677324295]];
tmpC = skew([0.15073999762535095; -0.026249999180436134; 0.0]);
tmpM = 2.638000011444092;
hyq.I{8} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ 4.6800001291558146E-4  ,	-(0.0),	-(0.0)];
[-(0.0),	  0.026409000158309937  ,	-(0.0)];
[-(0.0),	-(0.0),	  0.026180999353528023]];
tmpC = skew([0.12540000677108765; 5.000000237487257E-4; -9.999999747378752E-5]);
tmpM = 0.8809999823570251;
hyq.I{9} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ 0.13470500707626343  ,	-(-3.600000127335079E-5),	-(-0.02273399941623211)];
[-(-3.600000127335079E-5),	  0.14417099952697754  ,	-(5.0999999075429514E-5)];
[-(-0.02273399941623211),	-(5.0999999075429514E-5),	  0.01103300042450428]];
tmpC = skew([0.04262999817728996; 0.0; -0.16931000351905823]);
tmpM = 2.930000066757202;
hyq.I{10} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ 0.005495000164955854  ,	-(-0.007418000139296055),	-(-1.0199999815085903E-4)];
[-(-0.007418000139296055),	  0.08713600039482117  ,	-(-2.099999983329326E-5)];
[-(-1.0199999815085903E-4),	-(-2.099999983329326E-5),	  0.08987099677324295]];
tmpC = skew([0.15073999762535095; -0.026249999180436134; 0.0]);
tmpM = 2.638000011444092;
hyq.I{11} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ 4.6800001291558146E-4  ,	-(0.0),	-(0.0)];
[-(0.0),	  0.026409000158309937  ,	-(0.0)];
[-(0.0),	-(0.0),	  0.026180999353528023]];
tmpC = skew([0.12540000677108765; 5.000000237487257E-4; -9.999999747378752E-5]);
tmpM = 0.8809999823570251;
hyq.I{12} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ 0.13470500707626343  ,	-(-3.600000127335079E-5),	-(-0.02273399941623211)];
[-(-3.600000127335079E-5),	  0.14417099952697754  ,	-(5.0999999075429514E-5)];
[-(-0.02273399941623211),	-(5.0999999075429514E-5),	  0.01103300042450428]];
tmpC = skew([0.04262999817728996; 0.0; -0.16931000351905823]);
tmpM = 2.930000066757202;
hyq.I{13} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ 0.005495000164955854  ,	-(0.007418000139296055),	-(1.0199999815085903E-4)];
[-(0.007418000139296055),	  0.08713600039482117  ,	-(-2.099999983329326E-5)];
[-(1.0199999815085903E-4),	-(-2.099999983329326E-5),	  0.08987099677324295]];
tmpC = skew([0.15073999762535095; 0.026249999180436134; 0.0]);
tmpM = 2.638000011444092;
hyq.I{14} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ 4.6800001291558146E-4  ,	-(0.0),	-(0.0)];
[-(0.0),	  0.026409000158309937  ,	-(0.0)];
[-(0.0),	-(0.0),	  0.026180999353528023]];
tmpC = skew([0.12540000677108765; -5.000000237487257E-4; 9.999999747378752E-5]);
tmpM = 0.8809999823570251;
hyq.I{15} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ 0.13470500707626343  ,	-(3.600000127335079E-5),	-(0.02273399941623211)];
[-(3.600000127335079E-5),	  0.14417099952697754  ,	-(5.0999999075429514E-5)];
[-(0.02273399941623211),	-(5.0999999075429514E-5),	  0.01103300042450428]];
tmpC = skew([0.04262999817728996; 0.0; 0.16931000351905823]);
tmpM = 2.930000066757202;
hyq.I{16} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ 0.005495000164955854  ,	-(0.007418000139296055),	-(1.0199999815085903E-4)];
[-(0.007418000139296055),	  0.08713600039482117  ,	-(-2.099999983329326E-5)];
[-(1.0199999815085903E-4),	-(-2.099999983329326E-5),	  0.08987099677324295]];
tmpC = skew([0.15073999762535095; 0.026249999180436134; 0.0]);
tmpM = 2.638000011444092;
hyq.I{17} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];


tmpI = ...
[[ 4.6800001291558146E-4  ,	-(0.0),	-(0.0)];
[-(0.0),	  0.026409000158309937  ,	-(0.0)];
[-(0.0),	-(0.0),	  0.026180999353528023]];
tmpC = skew([0.12540000677108765; -5.000000237487257E-4; 9.999999747378752E-5]);
tmpM = 0.8809999823570251;
hyq.I{18} = [tmpI, tmpM *tmpC; tmpM *tmpC', eye(3)*tmpM ];

